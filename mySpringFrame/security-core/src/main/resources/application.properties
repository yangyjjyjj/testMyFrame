server.port=1002

spring.application.name=security-core

#mysql连接
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://39.105.88.199:3306/life_records?useUnicode=true&characterEncoding=utf-8&useSSL=true
spring.datasource.url=jdbc:mysql://39.105.88.199:3306/life_records?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true

spring.datasource.username=root
spring.datasource.password=123456

# <!-- mybatis_config 别名设置 -->
mybatis.type-aliases-package=com.wtwd.ldl.bean

# <!-- mybatis_config -->
mybatis.mapper-locations=classpath:mapper/*.xml


#redis配置
# <!-- Redis配置 -->
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
spring.redis.port=6379
spring.redis.password=
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接超时时间（毫秒）
spring.redis.timeout=60

# <!-- 连接池druid配置 -->
# 初始化连接数
spring.datasource.initialSize=5
# 最小空闲连接数
spring.datasource.minIdle=5
# 最大连接数
spring.datasource.maxActive=20
# 获取连接等待超时的时间
spring.datasource.maxWait=60000
# 间隔60秒执行一次连接回收器
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 5分钟内没有任何操作的空闲连接会被回收
spring.datasource.minEvictableIdleTimeMillis=300000
# 验证连接有效性的sql
spring.datasource.validationQuery=SELECT 1 FROM DUAL
# 空闲时校验，建议开启
spring.datasource.testWhileIdle=true
# 使用中是否检验有效性，推荐关闭
spring.datasource.testOnBorrow=false
# 归还连接时是否检验有效性，推荐关闭
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=false
# 配置监控统计拦截的过滤器，stat用于接收状态，wall用于防止sql注入，logback用于使用logback日志输出
spring.datasource.filters=stat,wall,logback
# sql合并统计，打开mergeSql功能并设置慢sql的时间为
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=1000
# 合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true